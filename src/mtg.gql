# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageInfo {
  limit: Float!
  page: Float!
  has_more: Boolean!
  total_rows: Float!
  total_pages: Float!
}

type CardImagery {
  """
  A transparent, rounded full card PNG. This is the best image to use for videos or other high-quality content.
  """
  png: String

  """
  A full card image with the rounded corners and the majority of the border cropped off. Designed for dated contexts where rounded images can’t be used.
  """
  border_crop: String

  """
  A rectangular crop of the card’s art only. Not guaranteed to be perfect for cards with outlier designs or strange frame arrangements
  """
  art_crop: String

  """A large full card image"""
  large: String

  """A medium-sized full card image"""
  normal: String

  """A small full card image. Designed for use as thumbnail or list icon."""
  small: String
}

type CardFace {
  id: String!
  card_id: UUID!
  artist: String
  artist_id: UUID
  cmc: Float
  color_indicator: [Color!]
  colors: [Color!]
  defense: String
  flavor_text: String
  illustration_id: String
  image_uris: CardImagery
  layout: Layout
  loyalty: String
  mana_cost: String!
  name: String!
  object: String!
  oracle_id: String
  oracle_text: String
  power: String
  printed_name: String
  printed_text: String
  printed_type_line: String
  toughness: String
  type_line: String
  watermark: String
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

"\nColor Arrays\n\nWhenever the API presents set of Magic colors, the field will be an array that uses the uppercase, single-character abbreviations for those colors. For example, [\"W\",\"U\"] represents something that is both white and blue. Colorless sources are denoted with an empty array []\n\nCommon places were you might see this kind of array are a Card object’s colors and color_identity. When a color field is null or missing, it implies that that information is not pertinent for the current object. It does not imply that the object is colorless.\n\nColor arrays are not guaranteed to be in a particular order.\n  "
enum Color {
  """White"""
  W

  """Blue"""
  U

  """Black"""
  B

  """Red"""
  R

  """Green"""
  G
}

"\n  The layout property categorizes the arrangement of card parts, faces, and other bounded regions on cards. The layout can be used to programmatically determine which other properties on a card you can expect.\n\n  Specifically:\n  \n      Cards with the layouts split, flip, transform, and double_faced_token will always have a card_faces property describing the distinct faces.\n      Cards with the layout meld will always have an all_parts property pointing to the other meld parts.\n  "
enum Layout {
  """A standard Magic card with one face"""
  normal

  """A split-faced card"""
  split

  """Cards that invert vertically with the flip keyword"""
  flip

  """Double-sided cards that transform"""
  transform

  """Double-sided cards that can be played either-side"""
  modal_dfc

  """Cards with meld parts printed on the back"""
  meld

  """Cards with Level Up"""
  leveler

  """Class-type enchantment cards"""
  class

  """Case-type enchantment cards"""
  case

  """Saga-type cards"""
  saga

  """Cards with an Adventure spell part"""
  adventure

  """Cards with Mutate"""
  mutate

  """Cards with Prototype"""
  prototype

  """Battle-type cards"""
  battle

  """Plane and Phenomenon-type cards"""
  planar

  """Scheme-type cards"""
  scheme

  """Vanguard-type cards"""
  vanguard

  """Token cards"""
  token

  """Tokens with another token printed on the back"""
  double_faced_token

  """Emblem cards"""
  emblem

  """Cards with Augment"""
  augment

  """Host-type cards"""
  host

  """Art Series collectable double-faced cards"""
  art_series

  """A Magic card with two sides that are unrelated"""
  reversible_card
}

type Set {
  id: UUID!
  object: String!
  code: String!
  mtgo_code: String
  arena_code: String
  tcgplayer_id: Float
  name: String!
  set_type: SetType!
  released_at: DateTime!
  block_code: String
  block: String
  parent_set_code: String
  card_count: Float!
  printed_size: Float
  digital: Boolean!
  foil_only: Boolean!
  nonfoil_only: Boolean!
  scryfall_uri: String!
  uri: String!
  icon_svg_uri: String!
  search_uri: String!
  cards: [Card!]!
}

"\n  Scryfall provides an overall categorization for each Set in the set_type property.\n  "
enum SetType {
  """A yearly Magic core set (Tenth Edition, etc)"""
  core

  """A rotational expansion set in a block"""
  expansion

  """A reprint set that contains no new cards"""
  masters

  """An Arena-only digital set"""
  alchemy

  """Masterpiece Series premium foil cards"""
  masterpiece

  """A set that contains a marketing card"""
  arsenal

  """From the Vault gift sets"""
  from_the_vault

  """Spellbook series gift sets"""
  spellbook

  """Premium Deck Series decks"""
  premium_deck

  """Duel Decks"""
  duel_deck

  """Draft Innovation product sets"""
  draft_innovation

  """Magic Online treasure chest prize sets"""
  treasure_chest

  """Commander preconstructed decks"""
  commander

  """Planechase sets"""
  planechase

  """Archenemy sets"""
  archenemy

  """Vanguard card sets"""
  vanguard

  """A funny un-set or set with funny promos"""
  funny

  """A starter/introductory set"""
  starter

  """A gift box set"""
  box

  """A set with non-redeemable promotional cards"""
  promo

  """A set made up of tokens and emblems"""
  token

  """
  A set made up of gold-bordered, oversize, or trophy cards that are not legal
  """
  memorabilia

  """A set made up of minigames"""
  minigame
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""An object describing the legality of a card across play formats."""
type Legalities {
  standard: Legality
  future: Legality
  historic: Legality
  timeless: Legality
  gladiator: Legality
  pioneer: Legality
  explorer: Legality
  modern: Legality
  legacy: Legality
  pauper: Legality
  vintage: Legality
  penny: Legality
  commander: Legality
  oathbreaker: Legality
  standardbrawl: Legality
  brawl: Legality
  alchemy: Legality
  paupercommander: Legality
  duel: Legality
  oldschool: Legality
  premodern: Legality
  predh: Legality
}

"\n  An object describing the legality of a card across play formats. Possible legalities are legal, not_legal, restricted, and banned. \n  "
enum Legality {
  """Legal"""
  legal

  """Not Legal"""
  not_legal

  """Restricted"""
  restricted

  """Banned"""
  banned
}

"""
An object containing daily price information for this card, including usd, 
  usd_foil, usd_etched, eur, eur_foil, eur_etched, and tix prices, as Decimals (strings). 
"""
type Prices {
  usd: String
  usd_foil: String
  usd_etched: String
  eur: String
  eur_foil: String
  eur_etched: String
  tix: String
}

"""
An object describing a related card.
  
  Cards that are closely related to other cards (because they call them by name, 
  or generate a token, or meld, etc) have a all_parts property that contains 
  Related Card objects. Those objects have the following properties:
"""
type RelatedCardInfo {
  """The ID of the related card."""
  id: String!

  """A content type for this object, always related_card. """
  object: String!

  """
  A field explaining what role this card plays in this relationship, 
      one of token, meld_part, meld_result, or combo_piece. 
  """
  component: String!

  """The name of the related card."""
  name: String!

  """The type line of the related card."""
  type_line: String!

  """The URI for this card on Scryfall API."""
  uri: String!
}

type Card {
  id: UUID!
  lang: Language
  arena_id: Float
  mtgo_id: Float
  mtgo_foil_id: Float
  multiverse_ids: [Float!]
  tcgplayer_id: Float
  tcgplayer_etched_id: Float
  cardmarket_id: Float
  object: String!
  layout: Layout!
  oracle_id: String
  prints_search_uri: URL
  rulings_uri: URL
  scryfall_uri: URL!
  uri: URL!
  all_parts: [RelatedCardInfo!]
  card_faces: [CardFace!]
  cmc: Float
  color_identity: [Color!]!
  color_indicator: [Color!]
  colors: [Color!]
  defense: String
  edhrec_rank: Float
  hand_modifier: String
  keywords: [String!]!
  legalities: Legalities
  life_modifier: String
  loyalty: String
  mana_cost: String
  name: String!
  oracle_text: String
  penny_rank: Float
  power: String
  produced_mana: [Color!]
  reserved: Boolean!
  toughness: String
  type_line: String
  artist: String
  artist_ids: [String!]
  attraction_lights: [String!]
  booster: Boolean!
  border_color: String!
  card_back_id: String
  collector_number: String!
  content_warning: Boolean
  digital: Boolean!
  finishes: [String!]
  flavor_name: String
  flavor_text: String
  frame_effects: [FrameEffect!]
  frame: Frame!
  full_art: Boolean!
  games: [String!]
  highres_image: Boolean!
  illustration_id: String
  image_status: String!
  image_uris: CardImagery
  oversized: Boolean!
  prices: Prices!
  printed_name: String
  printed_text: String
  printed_type_line: String
  promo: Boolean!
  promo_types: [String!]
  purchase_uris: JSON
  rarity: String!
  related_uris: [URL!]
  released_at: DateTime!
  reprint: Boolean!
  scryfall_set_uri: URL!
  set_name: String!
  set_search_uri: URL!
  set_type: String!
  set_code: String!
  set_id: UUID!
  story_spotlight: Boolean!
  textless: Boolean!
  variation: Boolean!
  variation_of: String
  security_stamp: String
  watermark: String
}

"\n  Scryfall archives Magic cards in 17 languages (including some unofficial languages).\n\n  Each Card object indicates its language in the lang property using an ISO-like code. When available, cards may also include their printed text in printed_name, printed_type_line, and printed_text fields.\n  \n  Please note that Oracle text is always English, per game rules. Cards printed in non-English languages are a translation of the Oracle text at the time the card was printed, but these texts do not receive errata.\n  \n  Our support for multiple languages in older sets is limited. We are expanding this data slowly over time.\n  "
enum Language {
  """English"""
  en

  """Spanish"""
  es

  """French"""
  fr

  """German"""
  de

  """Italian"""
  it

  """Portuguese"""
  pt

  """Japanese"""
  ja

  """Korean"""
  ko

  """Russian"""
  ru

  """Simplified Chinese"""
  zhs

  """Traditional Chinese"""
  zht

  """Hebrew"""
  he

  """Latin"""
  la

  """Ancient Greek"""
  grc

  """Arabic"""
  ar

  """Sanskrit"""
  sa

  """Phyrexian"""
  ph
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"\n  The frame_effects field tracks additional frame artwork applied over a particular frame. \n  For example, there are both 2003 and 2015-frame cards with the Nyx-touched effect.\n  "
enum FrameEffect {
  """The cards have a legendary crown"""
  legendary

  """The miracle frame effect"""
  miracle

  """The nyxtouched frame effect"""
  nyxtouched

  """The draft-matters frame effect"""
  draft

  """The devoid frame effect"""
  devoid

  """The Odyssey tombstone mark"""
  tombstone

  """A colorshifted frame"""
  colorshifted

  """The FNM-style inverted frame"""
  inverted

  """The sun and moon transform marks"""
  sunmoondfc

  """The compass and land transform marks"""
  compasslanddfc

  """The Origins and planeswalker transform marks"""
  originpwdfc

  """The moon and Eldrazi transform marks"""
  mooneldrazidfc

  """The waxing and waning crescent moon transform marks"""
  waxingandwaningmoondfc

  """A custom Showcase frame"""
  showcase

  """An extended art frame"""
  extendedart

  """The cards have a companion frame"""
  companion

  """The cards have an etched foil treatment"""
  etched

  """The cards have the snowy frame effect"""
  snow

  """The cards have the Lesson frame effect"""
  lesson

  """The cards have the Shattered Glass frame effect"""
  shatteredglass

  """The cards have More Than Meets the Eye™ marks"""
  convertdfc

  """The cards have fan transforming marks"""
  fandfc

  """The cards have the Upside Down transforming marks"""
  upsidedowndfc

  """The cards have Spree asterisks"""
  spree

  """The cards have a full-art frame"""
  fullart
}

"\n  The frame field tracks the edition of the card frame of used for the re/print in question. \n  The overall Magic frame has gone though several major revisions in the game's lifetime.\n  "
enum Frame {
  """The original Magic card frame, starting from Limited Edition Alpha."""
  y1993

  """The updated classic frame starting from Mirage block"""
  y1997

  """
  The “modern” Magic card frame, introduced in Eighth Edition and Mirrodin block.
  """
  y2003

  """The holofoil-stamp Magic card frame, introduced in Magic 2015."""
  y2015

  """The frame used on cards from the future"""
  future
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type CardPage {
  rows: [Card!]!
  page_info: PageInfo!
}

type SetHeader {
  id: UUID!
  object: String!
  code: String!
  mtgo_code: String
  arena_code: String
  tcgplayer_id: Float
  name: String!
  set_type: SetType!
  released_at: DateTime!
  block_code: String
  block: String
  parent_set_code: String
  card_count: Float!
  printed_size: Float
  digital: Boolean!
  foil_only: Boolean!
  nonfoil_only: Boolean!
  scryfall_uri: String!
  uri: String!
  icon_svg_uri: String!
  search_uri: String!
}

type Query {
  set(id: String!): Set!
  sets(limit: Int = 100, order: String, page: Int = 1, where: JSONObject): [SetHeader!]!
  card(id: String!): Card!
  cards(limit: Int = 100, order: String, page: Int = 1, where: JSONObject): CardPage!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")